/*
 * This file is generated by jOOQ.
 */
package com.godov.crudskyweaver.domain.jooq.tables;


import com.godov.crudskyweaver.domain.jooq.Keys;
import com.godov.crudskyweaver.domain.jooq.Public;
import com.godov.crudskyweaver.domain.jooq.enums.HeroEnum;
import com.godov.crudskyweaver.domain.jooq.enums.ResultEnum;
import com.godov.crudskyweaver.domain.jooq.tables.records.MatchesRecord;
import com.godov.crudskyweaver.enums.Hero;
import com.godov.crudskyweaver.enums.Result;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.Internal;
import org.jooq.impl.*;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Matches extends TableImpl<MatchesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.matches</code>
     */
    public static final Matches MATCHES = new Matches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchesRecord> getRecordType() {
        return MatchesRecord.class;
    }

    /**
     * The column <code>public.matches.id</code>.
     */
    public final TableField<MatchesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.matches.my_hero</code>.
     */
    public final TableField<MatchesRecord, Hero> MY_HERO = createField(DSL.name("my_hero"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.godov.crudskyweaver.domain.jooq.enums.HeroEnum.class), this, "", new EnumConverter<HeroEnum, Hero>(HeroEnum.class, Hero.class));

    /**
     * The column <code>public.matches.opponent_hero</code>.
     */
    public final TableField<MatchesRecord, Hero> OPPONENT_HERO = createField(DSL.name("opponent_hero"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.godov.crudskyweaver.domain.jooq.enums.HeroEnum.class), this, "", new EnumConverter<HeroEnum, Hero>(HeroEnum.class, Hero.class));

    /**
     * The column <code>public.matches.result</code>.
     */
    public final TableField<MatchesRecord, Result> RESULT = createField(DSL.name("result"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.godov.crudskyweaver.domain.jooq.enums.ResultEnum.class), this, "", new EnumConverter<ResultEnum, Result>(ResultEnum.class, Result.class));

    /**
     * The column <code>public.matches.played_on</code>.
     */
    public final TableField<MatchesRecord, LocalDate> PLAYED_ON = createField(DSL.name("played_on"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.matches.opponent_address</code>.
     */
    public final TableField<MatchesRecord, String> OPPONENT_ADDRESS = createField(DSL.name("opponent_address"), SQLDataType.VARCHAR(42), this, "");

    private Matches(Name alias, Table<MatchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Matches(Name alias, Table<MatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.matches</code> table reference
     */
    public Matches(String alias) {
        this(DSL.name(alias), MATCHES);
    }

    /**
     * Create an aliased <code>public.matches</code> table reference
     */
    public Matches(Name alias) {
        this(alias, MATCHES);
    }

    /**
     * Create a <code>public.matches</code> table reference
     */
    public Matches() {
        this(DSL.name("matches"), null);
    }

    public <O extends Record> Matches(Table<O> child, ForeignKey<O, MatchesRecord> key) {
        super(child, key, MATCHES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MatchesRecord, Long> getIdentity() {
        return (Identity<MatchesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MatchesRecord> getPrimaryKey() {
        return Keys.PK_MATCHES_ID;
    }

    @Override
    public List<Check<MatchesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("opponent_address_check"), "((((opponent_address)::text ~~ '0x%'::text) AND (char_length((opponent_address)::text) = 42)))", true)
        );
    }

    @Override
    public Matches as(String alias) {
        return new Matches(DSL.name(alias), this);
    }

    @Override
    public Matches as(Name alias) {
        return new Matches(alias, this);
    }

    @Override
    public Matches as(Table<?> alias) {
        return new Matches(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(String name) {
        return new Matches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(Name name) {
        return new Matches(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(Table<?> name) {
        return new Matches(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Hero, Hero, Result, LocalDate, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Hero, ? super Hero, ? super Result, ? super LocalDate, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Hero, ? super Hero, ? super Result, ? super LocalDate, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
